plugins {
	id 'fabric-loom' version '1.10-SNAPSHOT'
	id 'maven-publish'
	id 'jacoco'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// These repositories are only for Gradle plugin lookup, not for project dependencies
	maven {
		name = 'ParchmentMC'
		url = 'https://maven.parchmentmc.org'
	}
}

loom {
	splitEnvironmentSourceSets()

	mods {
		"lodiffusion" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// NOTE: Distant Horizons integration is runtime-only via reflection
	// DH doesn't publish to Maven Central, so we avoid compile-time dependencies
	// Users need to install DH separately for LOD features to work
	// Runtime detection handles DH presence/absence gracefully

	// JUnit 5 for testing
	testImplementation 'org.junit.jupiter:junit-jupiter:5.9.2'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
		// Mockito for mocking in tests
	testImplementation 'org.mockito:mockito-core:5.1.1'
	testImplementation 'org.mockito:mockito-junit-jupiter:5.1.1'
	
	// NBT library for parsing Minecraft region files
	implementation 'io.github.querz:nbt:6.1'
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archives_base_name}"}
	}
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

jacoco {
	toolVersion = "0.8.11"
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		html.required = true
		csv.required = false
	}
	
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
				// Exclude main mod class and data classes from coverage
				'**/HelloTerrainMod.class'
			])
		}))
	}
}

jacocoTestCoverageVerification {
	dependsOn jacocoTestReport
	violationRules {
		rule {
			limit {
				minimum = 0.70 // 70% coverage threshold
			}
		}
	}
}

// Lint task for static analysis
tasks.register("lint", JavaCompile) {
	group = "verification"
	description = "Run static analysis with enhanced compiler warnings"
	
	// Configure the task to use the same source sets as main compilation
	source = sourceSets.main.java
	classpath = sourceSets.main.compileClasspath
	destinationDirectory = layout.buildDirectory.dir("tmp/lint")
	
	// Enhanced compiler options for static analysis
	options.compilerArgs.addAll([
		'-Xlint:all',           // Enable all warnings
		'-Xlint:-processing',   // Disable annotation processing warnings (too noisy)
		'-Xlint:-serial',       // Disable serialization warnings (not relevant for MC mods)
		'-Werror',              // Treat warnings as errors
		'-Xmaxwarns', '100',    // Limit warning count for readability
		'-parameters',          // Include parameter names for reflection
		'-deprecation',         // Show detailed deprecation info
		'-Xlint:unchecked'     // Show detailed unchecked conversion warnings
	])
	options.encoding = 'UTF-8'
	options.release = 21
	options.fork = true
	options.forkOptions.jvmArgs = ['-Xmx1g'] // Ensure enough memory for analysis
	
	doFirst {
		println "üîç Running static analysis with enhanced compiler warnings..."
		println "   Source files: ${source.files.size()}"
		println "   Output: ${destinationDirectory.get()}"
	}
	
	doLast {
		println "‚úÖ Static analysis completed successfully!"
		println "   All source files compiled without warnings or errors."
		println "   Ready for integration with additional tools (SpotBugs, Checkstyle, PMD)"
	}
}

// Make lint run as part of check
check.dependsOn lint

// publishing is already configured by fabric-loom, just need to add sources and javadoc
publishing {
	publications {
		maven(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// resolving dependencies.
	}
}
